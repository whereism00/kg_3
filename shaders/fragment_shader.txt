#version 330 core
out vec4 FragColor;

//uniform sampler2D texture;

uniform vec3 ambient;
uniform vec3 diffuse;
uniform vec3 specular;
uniform float shininess;

struct Light
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float constant;
	float linear;
	float quadratic;
};

in vec3 FragPos;
in vec3 Normal;
//in vec3 TexCoords;

uniform vec3 viewPos;

#define NR_POINT_LIGHTS 2  
uniform Light Lights[NR_POINT_LIGHTS];

vec3 CalcPointLight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // диффузное освещение
    float diff = max(dot(normal, lightDir), 0.0);
    // освещение зеркальных бликов
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    // затухание
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // комбинируем результаты
    vec3 ambient  = light.ambient;//  * vec3(texture(diffuse, TexCoords));
    vec3 diffuse  = light.diffuse  * diff;// * vec3(texture(diffuse, TexCoords));
    vec3 specular = light.specular * spec;// * vec3(texture(specular, TexCoords));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
};

void main()
{
	vec3 result = vec3(0.0);

	// свойства
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
	for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(Lights[i], norm, FragPos, viewDir);   
    FragColor = vec4(result, 1.0);
}